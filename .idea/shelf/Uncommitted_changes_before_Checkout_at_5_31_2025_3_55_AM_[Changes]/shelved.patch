Index: app/src/main/java/screens/MainAppScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.careconnect.screens\r\n\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.automirrored.filled.Chat\r\nimport androidx.compose.material.icons.filled.*\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.vector.ImageVector\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport androidx.navigation.compose.currentBackStackEntryAsState\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.careconnect.database.User\r\nimport com.example.careconnect.navigation.AppNavigation\r\nimport com.example.careconnect.navigation.Screen\r\nimport com.example.careconnect.viewmodel.SocialViewModel\r\nimport com.example.careconnect.viewmodel.FirebaseAuthViewModel\r\nimport com.example.careconnect.viewmodel.DirectMessageViewModel\r\n\r\ndata class BottomNavItem(\r\n    val route: String,\r\n    val icon: ImageVector,\r\n    val label: String\r\n)\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun MainAppScreen(\r\n    currentUser: User,\r\n    socialViewModel: SocialViewModel,\r\n    authViewModel: FirebaseAuthViewModel,\r\n    onNavigateToUserChats: () -> Unit\r\n) {\r\n    val navController = rememberNavController()\r\n    val navBackStackEntry by navController.currentBackStackEntryAsState()\r\n    val currentRoute = navBackStackEntry?.destination?.route\r\n    val directMessageViewModel: DirectMessageViewModel = viewModel()\r\n    val totalUnreadCount by directMessageViewModel.totalUnreadCount.collectAsState()\r\n    \r\n    // Ensure ViewModel is initialized\r\n    LaunchedEffect(Unit) {\r\n        directMessageViewModel.ensureInitialized()\r\n    }\r\n\r\n    val bottomNavItems = listOf(\r\n        BottomNavItem(Screen.Home.route, Icons.Default.Home, \"HOME\"),\r\n        BottomNavItem(Screen.Browse.route, Icons.Default.Build, \"TOOLS\"),\r\n        BottomNavItem(Screen.Chat.route, Icons.AutoMirrored.Filled.Chat, \"CHAT\"),\r\n        BottomNavItem(Screen.People.route, Icons.Default.People, \"PEOPLE\"),\r\n        BottomNavItem(Screen.Settings.route, Icons.Default.Person, \"ACCOUNT\")\r\n    )\r\n\r\n    Scaffold(\r\n        bottomBar = {\r\n            // Only show bottom bar on main screens\r\n            if (currentRoute in bottomNavItems.map { it.route }) {\r\n                NavigationBar {\r\n                    bottomNavItems.forEach { item ->\r\n                        NavigationBarItem(\r\n                            icon = { Icon(item.icon, contentDescription = item.label) },\r\n                            label = { Text(item.label) },\r\n                            selected = currentRoute == item.route,\r\n                            onClick = {\r\n                                if (currentRoute != item.route) {\r\n                                    navController.navigate(item.route) {\r\n                                        // Pop up to the start destination to avoid building up a large stack\r\n                                        popUpTo(Screen.Home.route) {\r\n                                            saveState = true\r\n                                        }\r\n                                        launchSingleTop = true\r\n                                        restoreState = true\r\n                                    }\r\n                                }\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        floatingActionButton = {\r\n            // Show floating chat button on all main screens except the chat screen\r\n            if (currentRoute in bottomNavItems.map { it.route } && currentRoute != Screen.Chat.route) {\r\n                FloatingActionButton(\r\n                    onClick = {\r\n                        navController.navigate(Screen.DirectMessages.route)\r\n                    },\r\n                    containerColor = MaterialTheme.colorScheme.primary,\r\n                    modifier = Modifier.size(56.dp)\r\n                ) {\r\n                    Box {\r\n                        Icon(\r\n                            Icons.AutoMirrored.Filled.Chat,\r\n                            contentDescription = \"Messages\",\r\n                            tint = Color.White\r\n                        )\r\n                        \r\n                        // Unread count badge\r\n                        if (totalUnreadCount > 0) {\r\n                            Box(\r\n                                modifier = Modifier\r\n                                    .size(18.dp)\r\n                                    .clip(CircleShape)\r\n                                    .background(MaterialTheme.colorScheme.error)\r\n                                    .align(Alignment.TopEnd),\r\n                                contentAlignment = Alignment.Center\r\n                            ) {\r\n                                Text(\r\n                                    text = if (totalUnreadCount > 99) \"99+\" else totalUnreadCount.toString(),\r\n                                    color = Color.White,\r\n                                    fontSize = 10.sp,\r\n                                    fontWeight = FontWeight.Bold\r\n                                )\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    ) { paddingValues ->\r\n        AppNavigation(\r\n            navController = navController,\r\n            currentUser = currentUser,\r\n            socialViewModel = socialViewModel,\r\n            authViewModel = authViewModel,\r\n            paddingValues = paddingValues\r\n        )\r\n    }\r\n}\r\n
===================================================================
diff --git a/app/src/main/java/screens/MainAppScreen.kt b/app/src/main/java/screens/MainAppScreen.kt
--- a/app/src/main/java/screens/MainAppScreen.kt	(revision ee560757b16c9f4c0e2fbdfee85de499e4c3f9a9)
+++ b/app/src/main/java/screens/MainAppScreen.kt	(date 1748627225910)
@@ -25,6 +25,7 @@
 import com.example.careconnect.viewmodel.SocialViewModel
 import com.example.careconnect.viewmodel.FirebaseAuthViewModel
 import com.example.careconnect.viewmodel.DirectMessageViewModel
+import com.example.careconnect.viewmodel.NewsViewModel
 
 data class BottomNavItem(
     val route: String,
@@ -38,6 +39,7 @@
     currentUser: User,
     socialViewModel: SocialViewModel,
     authViewModel: FirebaseAuthViewModel,
+    newsViewModel: NewsViewModel,
     onNavigateToUserChats: () -> Unit
 ) {
     val navController = rememberNavController()
@@ -131,6 +133,7 @@
             currentUser = currentUser,
             socialViewModel = socialViewModel,
             authViewModel = authViewModel,
+            newsViewModel = newsViewModel,
             paddingValues = paddingValues
         )
     }
